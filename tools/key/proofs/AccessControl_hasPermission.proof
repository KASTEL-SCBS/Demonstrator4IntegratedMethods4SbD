\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 26 10:11:32 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../pcc-imp-webservice/src/main/java/edu/kit/informatik/pcc/service/accesscontrol";

\proofObligation "#Proof Obligation Settings
#Thu Sep 26 10:11:32 CEST 2019
contract=edu.kit.informatik.pcc.service.accesscontrol.AccessControl[edu.kit.informatik.pcc.service.accesscontrol.AccessControl\\:\\:hasPermission(int,int)].JML normal_behavior operation contract.0
name=edu.kit.informatik.pcc.service.accesscontrol.AccessControl[edu.kit.informatik.pcc.service.accesscontrol.AccessControl\\:\\:hasPermission(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "jonas" ) (keyVersion "1fcdc525bf"))

(autoModeTime "5415")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "id,perm,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
(rule "Class_invariant_axiom_for_edu_kit_informatik_pcc_service_accesscontrol_AccessControl" (formula "6") (ifseqformula "3"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "eqSymm" (formula "10"))
(rule "eqSymm" (formula "7"))
(rule "sortsDisjointModuloNull" (formula "10"))
(rule "replace_known_right" (formula "10") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
(rule "false_right" (formula "10"))
(rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "7"))
(rule "nonNull" (formula "6") (inst "i=i"))
(rule "sub_literals" (formula "6") (term "2,1,0,1,1"))
 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "8")))
(rule "greater_literals" (formula "6") (term "0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "8"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "commute_or_2" (formula "5") (term "0"))
(rule "commute_or_2" (formula "6") (term "0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or" (formula "6") (term "0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_hasPermission,savedHeapBefore_hasPermission,_idBefore_hasPermission,_permBefore_hasPermission"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "res"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "for_to_while" (formula "11") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
 (builtin "Loop Invariant" (formula "11") (newnames "variant,b,heapBefore_LOOP,xBefore_LOOP,resBefore_LOOP,x_0,res_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
   (rule "leq_literals" (formula "11") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "eqSymm" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1"))
   (rule "mul_literals" (formula "11") (term "1,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0"))
   (rule "arrayLengthNotNegative" (formula "7") (term "1"))
   (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "andRight" (formula "12"))
   (branch "Case 1"
      (rule "impRight" (formula "12"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "allLeft" (formula "6") (inst "t=Z(0(#))"))
      (rule "leq_literals" (formula "6") (term "1,0"))
       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "13")))
      (rule "inEqSimp_commuteGeq" (formula "6"))
      (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
      (rule "qeq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "closeFalse" (formula "6"))
   )
   (branch "Case 2"
      (rule "notRight" (formula "12"))
      (rule "exLeft" (formula "1") (inst "sk=k_0"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "3"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Body Preserves Invariant"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaSubInt" (formula "13") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "13") (term "0,1,1,1,0,1"))
   (rule "andLeft" (formula "9"))
   (rule "impRight" (formula "14"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "eqSymm" (formula "13"))
   (rule "eqSymm" (formula "17") (term "1,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "17") (term "0,0,1,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "17") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "17") (term "1,0,0,1"))
   (rule "blockThrow" (formula "17") (term "1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "boxToDiamond" (formula "1") (term "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "commute_and" (formula "12") (term "1,0,0,0"))
   (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
   (rule "eval_order_array_access6" (formula "13") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "13"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "assignment_read_length" (formula "13"))
   (branch "Normal Execution (x_arr != null)"
       (builtin "One Step Simplification" (formula "13"))
      (rule "shift_paren_and" (formula "12") (term "0,0,0"))
      (rule "commute_and_2" (formula "12") (term "0,0,0,0"))
      (rule "commute_and" (formula "12") (term "0,0,0,0,0"))
      (rule "less_than_comparison_simple" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
      (rule "emptyModality" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "notRight" (formula "13"))
      (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0"))
      (rule "qeq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "arrayLengthIsAnInt" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "8") (term "0"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
      (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "arrayLengthNotNegative" (formula "9") (term "1"))
      (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=x_1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_3"))
      (rule "compound_less_than_comparison_2" (formula "17") (term "1") (inst "#v1=x_5") (inst "#v0=x_4"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_4"))
      (rule "assignment" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_5"))
      (rule "eval_order_array_access6" (formula "17") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_1"))
      (rule "assignment_read_attribute_this" (formula "17"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "assignment_read_length" (formula "17"))
      (branch "Normal Execution (x_arr_1 != null)"
          (builtin "One Step Simplification" (formula "17"))
         (rule "less_than_comparison_simple" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "17") (term "0,0,0,1,0"))
         (rule "replace_known_left" (formula "17") (term "0,0,1,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "allLeft" (formula "7") (inst "t=x_0"))
         (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
         (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
         (rule "add_literals" (formula "7") (term "0,0,1"))
         (rule "leq_literals" (formula "7") (term "0,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "12"))
         (rule "qeq_literals" (formula "7") (term "0,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "notLeft" (formula "7"))
         (rule "ifSplit" (formula "18"))
         (branch "if x_3 true"
             (builtin "One Step Simplification" (formula "19"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x_1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_6"))
            (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
            (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_7"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_7"))
            (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_8"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8"))
            (rule "compound_equality_comparison_1" (formula "18") (term "1") (inst "#v0=x_9"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_9"))
            (rule "eval_order_array_access4" (formula "18") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_arr_2"))
            (rule "assignment_read_attribute_this" (formula "18"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "assignment_array2" (formula "18"))
            (branch "Normal Execution (x_arr_2 != null)"
                (builtin "One Step Simplification" (formula "18"))
               (rule "equality_comparison_simple" (formula "18") (term "1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "compound_assignment_1_new" (formula "18") (term "1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifElseSplit" (formula "20"))
               (branch "if x_7 true"
                   (builtin "One Step Simplification" (formula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "ifSkipThen" (formula "21") (term "1"))
                  (rule "assignment" (formula "21") (term "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "blockEmpty" (formula "21") (term "1"))
                  (rule "postincrement" (formula "21") (term "1"))
                  (rule "compound_int_cast_expression" (formula "21") (term "1") (inst "#v=x_1"))
                  (rule "variableDeclarationAssign" (formula "21") (term "1"))
                  (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_10"))
                  (rule "remove_parentheses_right" (formula "21") (term "1"))
                  (rule "assignmentAdditionInt" (formula "21") (term "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "translateJavaAddInt" (formula "21") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "21") (term "1"))
                  (rule "assignment" (formula "21") (term "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "tryEmpty" (formula "21") (term "1"))
                  (rule "methodCallEmpty" (formula "21") (term "1"))
                  (rule "emptyModality" (formula "21") (term "1"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,0,1"))
                  (rule "mul_literals" (formula "21") (term "0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "21") (term "1,0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "0,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "1,1,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "21") (term "0,1,1,0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "21") (term "1,1,0,0,0,0,1,0"))
                  (rule "precOfInt" (formula "21") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,1"))
                  (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "21") (term "0,1,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,1,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,1,1"))
                  (rule "add_zero_right" (formula "21") (term "0,1,1"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,0,1,1"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,1"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,1"))
                  (rule "add_literals" (formula "21") (term "1,0,1,1"))
                  (rule "times_zero_1" (formula "21") (term "0,1,1"))
                  (rule "leq_literals" (formula "21") (term "1,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
                  (rule "times_zero_2" (formula "21") (term "1,0,1"))
                  (rule "add_zero_right" (formula "21") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                  (rule "mul_literals" (formula "21") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_subsumption1" (formula "21") (term "0,0") (ifseqformula "13"))
                  (rule "leq_literals" (formula "21") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "ifthenelse_split" (formula "15") (term "0"))
                  (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) TRUE"
                     (rule "exLeft" (formula "15") (inst "sk=k_0"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "eqSymm" (formula "19"))
                     (rule "inEqSimp_homoInEq0" (formula "17"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "applyEqRigid" (formula "25") (term "1,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                     (rule "mul_literals" (formula "17") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                     (rule "andRight" (formula "25"))
                     (branch "Case 1"
                        (rule "impRight" (formula "25"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "allLeft" (formula "7") (inst "t=add(Z(1(#)), x_0)"))
                        (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1"))
                        (rule "leq_literals" (formula "7") (term "0,1"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "closeFalse" (formula "14"))
                     )
                     (branch "Case 2"
                        (rule "nnf_ex2all" (formula "25"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "commute_or" (formula "1") (term "1,0"))
                        (rule "shift_paren_or" (formula "1") (term "0"))
                        (rule "commute_or_2" (formula "1") (term "0,0"))
                        (rule "commute_or" (formula "1") (term "0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "allLeft" (formula "1") (inst "t=k_0"))
                        (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "19"))
                        (rule "qeq_literals" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "1"))
                        (rule "andLeft" (formula "20"))
                        (rule "inEqSimp_homoInEq1" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0"))
                        (rule "add_zero_right" (formula "20") (term "0"))
                        (rule "leq_literals" (formula "20"))
                        (rule "closeFalse" (formula "20"))
                     )
                  )
                  (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) FALSE"
                     (rule "eqSymm" (formula "15"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "apply_eq_boolean" (formula "22") (term "1,1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "nnf_ex2all" (formula "16"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "andRight" (formula "22"))
                     (branch "Case 1"
                        (rule "impRight" (formula "22"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "allLeft" (formula "8") (inst "t=add(Z(1(#)), x_0)"))
                        (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "8") (term "0,0,1"))
                        (rule "leq_literals" (formula "8") (term "0,1"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "Case 2"
                        (rule "notRight" (formula "22"))
                        (rule "exLeft" (formula "1") (inst "sk=k_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "2"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1") (ifseqformula "8"))
                        (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "allLeft" (formula "5") (inst "t=k_0"))
                        (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                        (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "5") (term "0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "5"))
                        (rule "applyEq" (formula "21") (term "0,2,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "21") (term "0,2,1") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "24") (term "0,2,0") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,0"))
                        (rule "times_zero_1" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "22") (term "0,2,0") (ifseqformula "2"))
                        (rule "close" (formula "22") (ifseqformula "3"))
                     )
                  )
               )
               (branch "if x_7 false"
                   (builtin "One Step Simplification" (formula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "methodCallWithAssignmentUnfoldTarget" (formula "21") (term "1") (inst "#v0=i"))
                  (rule "variableDeclaration" (formula "21") (term "1") (newnames "i"))
                  (rule "eval_order_array_access4" (formula "21") (term "1") (inst "#v0=i_arr"))
                  (rule "variableDeclarationAssign" (formula "21") (term "1"))
                  (rule "variableDeclaration" (formula "21") (term "1") (newnames "i_arr"))
                  (rule "assignment_read_attribute_this" (formula "21"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "assignment_array2" (formula "21"))
                  (branch "Normal Execution (i_arr != null)"
                      (builtin "One Step Simplification" (formula "21"))
                      (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_hasPermission_0,result_0,exc_0") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                     (branch "Post (hasPermission)"
                         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "15")))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "18"))
                        (rule "eqSymm" (formula "18"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0"))
                        (rule "assignment" (formula "23") (term "1"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "blockEmpty" (formula "23") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0"))
                        (rule "ifSplit" (formula "23"))
                        (branch "if x_6 true"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "assignment" (formula "24") (term "1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "blockEmpty" (formula "24") (term "1"))
                           (rule "applyEq" (formula "19") (term "1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "exLeft" (formula "19") (inst "sk=k_0"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "20"))
                           (rule "polySimp_addComm1" (formula "20") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                           (rule "mul_literals" (formula "20") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                           (rule "postincrement" (formula "26") (term "1"))
                           (rule "compound_int_cast_expression" (formula "26") (term "1") (inst "#v=x_1"))
                           (rule "variableDeclarationAssign" (formula "26") (term "1"))
                           (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_10"))
                           (rule "remove_parentheses_right" (formula "26") (term "1"))
                           (rule "assignmentAdditionInt" (formula "26") (term "1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "translateJavaAddInt" (formula "26") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,1,0"))
                           (rule "widening_identity_cast_5" (formula "26") (term "1"))
                           (rule "assignment" (formula "26") (term "1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "tryEmpty" (formula "26") (term "1"))
                           (rule "methodCallEmpty" (formula "26") (term "1"))
                           (rule "emptyModality" (formula "26") (term "1"))
                            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "4")))
                           (rule "polySimp_mulComm0" (formula "26") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "26") (term "0,0,1"))
                           (rule "mul_literals" (formula "26") (term "0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "add_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "26") (term "0,1,0,1,0,0"))
                           (rule "precOfInt" (formula "26") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,1"))
                           (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,1,1"))
                           (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "26") (term "0,1,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,1,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,1,1"))
                           (rule "add_zero_right" (formula "26") (term "0,1,1"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0,1,1"))
                           (rule "add_literals" (formula "26") (term "0,0,0,1,1"))
                           (rule "add_zero_left" (formula "26") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,1"))
                           (rule "add_literals" (formula "26") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "26") (term "0,1,1"))
                           (rule "leq_literals" (formula "26") (term "1,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_homoInEq0" (formula "26") (term "1"))
                           (rule "times_zero_2" (formula "26") (term "1,0,1"))
                           (rule "add_zero_right" (formula "26") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
                           (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1"))
                           (rule "mul_literals" (formula "26") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1,1"))
                           (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_subsumption1" (formula "26") (term "0,0") (ifseqformula "15"))
                           (rule "leq_literals" (formula "26") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "andRight" (formula "26"))
                           (branch "Case 1"
                              (rule "impRight" (formula "26"))
                              (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                              (rule "add_literals" (formula "5") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0"))
                              (rule "qeq_literals" (formula "5") (term "0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "ifthenelse_split" (formula "17") (term "0"))
                              (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) TRUE"
                                 (rule "exLeft" (formula "17") (inst "sk=k_1"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "inEqSimp_homoInEq0" (formula "19"))
                                 (rule "polySimp_addComm1" (formula "19") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                 (rule "mul_literals" (formula "19") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                 (rule "allLeft" (formula "9") (inst "t=add(Z(1(#)), x_0)"))
                                 (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "16"))
                                 (rule "qeq_literals" (formula "9") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) FALSE"
                                 (rule "eqSymm" (formula "17"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "nnf_ex2all" (formula "22"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "allLeft" (formula "10") (inst "t=add(Z(1(#)), x_0)"))
                                 (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "10") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "10"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                           (branch "Case 2"
                              (rule "nnf_ex2all" (formula "26"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "commute_or" (formula "1") (term "1,0"))
                              (rule "shift_paren_or" (formula "1") (term "0"))
                              (rule "commute_or_2" (formula "1") (term "0,0"))
                              (rule "commute_or" (formula "1") (term "0,0,0"))
                              (rule "ifthenelse_split" (formula "18") (term "0"))
                              (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) TRUE"
                                 (rule "exLeft" (formula "18") (inst "sk=k_1"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "inEqSimp_homoInEq0" (formula "20"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                                 (rule "mul_literals" (formula "20") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "allLeft" (formula "1") (inst "t=k_1"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "22"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "leq_literals" (formula "1") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) FALSE"
                                 (rule "eqSymm" (formula "18"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "nnf_ex2all" (formula "23"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "arrayLengthIsAnInt" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                 (rule "allLeft" (formula "2") (inst "t=x_0"))
                                 (rule "replace_known_left" (formula "2") (term "0,1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,1"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "2") (term "0,1"))
                                 (rule "leq_literals" (formula "2") (term "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "2") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,0") (ifseqformula "7"))
                                 (rule "cut_direct" (formula "24") (term "0"))
                                 (branch "CUT: self.roles[x_0].permissions = null TRUE"
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "24"))
                                    (rule "arrayLengthIsAnInt" (formula "22") (term "0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                    (rule "allLeft" (formula "12") (inst "t=k_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "12") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "cut_direct" (formula "12") (term "1"))
                                    (branch "CUT: self.ids.length <= k_0 TRUE"
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "12"))
                                       (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                       (rule "mul_literals" (formula "6") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "13"))
                                       (rule "times_zero_1" (formula "15") (term "0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "6"))
                                       (rule "times_zero_1" (formula "19") (term "0,0"))
                                       (rule "add_zero_left" (formula "19") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                       (rule "mul_literals" (formula "19") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "24") (term "0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                        (builtin "Evaluate Query" (formula "28") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                       (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_0011000100001_0" (formula "29") (term "0"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "eqSymm" (formula "28") (term "0,0,1"))
                                       (rule "variableDeclaration" (formula "28") (term "1") (newnames "queryResult"))
                                       (rule "apply_eq_boolean_rigid" (formula "28") (term "0,0,0,1") (ifseqformula "29"))
                                       (rule "eqSymm" (formula "28") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "28"))
                                        (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "29"))
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "22")))
                                          (rule "andLeft" (formula "28"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "eqSymm" (formula "29"))
                                          (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,0"))
                                          (rule "assignment" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "applyEq" (formula "29") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "29") (term "1,0,1,0,0,0") (ifseqformula "26"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0"))
                                          (rule "methodCallEmpty" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "emptyModality" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "apply_eq_boolean" (formula "29") (term "1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "notLeft" (formula "29"))
                                          (rule "nnf_ex2all" (formula "29"))
                                          (rule "nnf_notAnd" (formula "1") (term "0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                          (rule "allLeft" (formula "1") (inst "t=k_0"))
                                          (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "27"))
                                          (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                          (rule "leq_literals" (formula "1") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "Exceptional Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "22")))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "andLeft" (formula "28"))
                                          (rule "andLeft" (formula "28"))
                                          (rule "andLeft" (formula "30"))
                                          (rule "notLeft" (formula "28"))
                                          (rule "close" (formula "31") (ifseqformula "30"))
                                       )
                                       (branch "Pre (hasPermission)"
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "22")) (ifInst ""  (formula "8")))
                                          (rule "closeTrue" (formula "28"))
                                       )
                                       (branch "Null reference (callee = null)"
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")))
                                          (rule "closeTrue" (formula "28"))
                                       )
                                    )
                                    (branch "CUT: self.ids.length <= k_0 FALSE"
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "inEqSimp_leqRight" (formula "27"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "allLeft" (formula "12") (inst "t=k_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "12") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                       (rule "leq_literals" (formula "12") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "29"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "allLeft" (formula "3") (inst "t=k_0"))
                                       (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0,0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "cut_direct" (formula "3") (term "1,0"))
                                       (branch "CUT: x_0 <= -1 + k_0 TRUE"
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "3"))
                                          (rule "times_zero_1" (formula "21") (term "0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                          (rule "mul_literals" (formula "21") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                           (builtin "Evaluate Query" (formula "31") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                          (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_01011000100001_0" (formula "32") (term "0"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "eqSymm" (formula "30") (term "0,0,1"))
                                          (rule "variableDeclaration" (formula "30") (term "1") (newnames "queryResult"))
                                          (rule "apply_eq_boolean_rigid" (formula "30") (term "0,0,0,1") (ifseqformula "32"))
                                          (rule "eqSymm" (formula "30") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                           (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                          (branch "Post (hasPermission)"
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "24")))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "31"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0"))
                                             (rule "assignment" (formula "32") (term "1"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "applyEq" (formula "31") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "31") (term "1,0,1,0,0,0") (ifseqformula "28"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0"))
                                             (rule "methodCallEmpty" (formula "32") (term "1"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "emptyModality" (formula "32") (term "1"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "apply_eq_boolean" (formula "31") (term "1") (ifseqformula "32"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "nnf_ex2all" (formula "31"))
                                             (rule "nnf_notAnd" (formula "1") (term "0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                             (rule "allLeft" (formula "1") (inst "t=k_0"))
                                             (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                                             (rule "qeq_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "29") (ifseqformula "1"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "inEqSimp_homoInEq1" (formula "29"))
                                             (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0"))
                                             (rule "add_zero_right" (formula "29") (term "0"))
                                             (rule "leq_literals" (formula "29"))
                                             (rule "closeFalse" (formula "29"))
                                          )
                                          (branch "Exceptional Post (hasPermission)"
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "24")))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "close" (formula "33") (ifseqformula "32"))
                                          )
                                          (branch "Pre (hasPermission)"
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "24")) (ifInst ""  (formula "9")))
                                             (rule "closeTrue" (formula "30"))
                                          )
                                          (branch "Null reference (callee = null)"
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "34")))
                                             (rule "closeTrue" (formula "30"))
                                          )
                                       )
                                       (branch "CUT: x_0 <= -1 + k_0 FALSE"
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "inEqSimp_leqRight" (formula "30"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "cut_direct" (formula "4") (term "0,1"))
                                          (branch "CUT: self.ids[k_0] = id TRUE"
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "notLeft" (formula "5"))
                                              (builtin "Evaluate Query" (formula "33") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                             (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_011011000100001_0" (formula "34") (term "0"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "eqSymm" (formula "31") (term "0,0,1"))
                                             (rule "variableDeclaration" (formula "31") (term "1") (newnames "queryResult"))
                                             (rule "apply_eq_boolean_rigid" (formula "31") (term "0,0,0,1") (ifseqformula "34"))
                                             (rule "eqSymm" (formula "31") (term "0,0,1"))
                                              (builtin "One Step Simplification" (formula "31"))
                                              (builtin "Use Operation Contract" (formula "31") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                             (branch "Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "eqSymm" (formula "32"))
                                                (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,0"))
                                                (rule "assignment" (formula "33") (term "1"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEq" (formula "32") (term "1,0,1,0,0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "32") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "29"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,0"))
                                                (rule "methodCallEmpty" (formula "33") (term "1"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "emptyModality" (formula "33") (term "1"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "apply_eq_boolean" (formula "32") (term "1") (ifseqformula "33"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "notLeft" (formula "32"))
                                                (rule "nnf_ex2all" (formula "32"))
                                                (rule "nnf_notAnd" (formula "1") (term "0"))
                                                (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                                (rule "allLeft" (formula "1") (inst "t=k_0"))
                                                (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "28"))
                                                (rule "qeq_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "30"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0"))
                                                (rule "add_literals" (formula "1") (term "0"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "Exceptional Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "32"))
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")))
                                                (rule "andLeft" (formula "31"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "notLeft" (formula "31"))
                                                (rule "close" (formula "34") (ifseqformula "33"))
                                             )
                                             (branch "Pre (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")) (ifInst ""  (formula "10")))
                                                (rule "closeTrue" (formula "31"))
                                             )
                                             (branch "Null reference (callee = null)"
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "36")))
                                                (rule "closeTrue" (formula "31"))
                                             )
                                          )
                                          (branch "CUT: self.ids[k_0] = id FALSE"
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                              (builtin "Evaluate Query" (formula "32") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                             (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_111011000100001_0" (formula "33") (term "0"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "eqSymm" (formula "30") (term "0,0,1"))
                                             (rule "variableDeclaration" (formula "30") (term "1") (newnames "queryResult"))
                                             (rule "apply_eq_boolean_rigid" (formula "30") (term "0,0,0,1") (ifseqformula "33"))
                                             (rule "eqSymm" (formula "30") (term "0,0,1"))
                                              (builtin "One Step Simplification" (formula "30"))
                                              (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                             (branch "Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "23")))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "eqSymm" (formula "31"))
                                                (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0"))
                                                (rule "assignment" (formula "32") (term "1"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEq" (formula "31") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "28"))
                                                (rule "applyEq" (formula "31") (term "1,0,1,0,0,0") (ifseqformula "28"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0"))
                                                (rule "methodCallEmpty" (formula "32") (term "1"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "emptyModality" (formula "32") (term "1"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "apply_eq_boolean" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "notLeft" (formula "31"))
                                                (rule "nnf_ex2all" (formula "31"))
                                                (rule "nnf_notAnd" (formula "1") (term "0"))
                                                (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                                (rule "allLeft" (formula "1") (inst "t=k_0"))
                                                (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "29") (ifseqformula "1"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "inEqSimp_homoInEq1" (formula "29"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                                (rule "add_literals" (formula "29") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0"))
                                                (rule "add_literals" (formula "29") (term "0"))
                                                (rule "leq_literals" (formula "29"))
                                                (rule "closeFalse" (formula "29"))
                                             )
                                             (branch "Exceptional Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "23")))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "notLeft" (formula "30"))
                                                (rule "close" (formula "33") (ifseqformula "32"))
                                             )
                                             (branch "Pre (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "23")) (ifInst ""  (formula "9")))
                                                (rule "closeTrue" (formula "30"))
                                             )
                                             (branch "Null reference (callee = null)"
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "35")))
                                                (rule "closeTrue" (formula "30"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: self.roles[x_0].permissions = null FALSE"
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "allLeft" (formula "12") (inst "t=k_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "12") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "cut_direct" (formula "12") (term "1"))
                                    (branch "CUT: self.ids.length <= k_0 TRUE"
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "12"))
                                       (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                       (rule "mul_literals" (formula "6") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "13"))
                                       (rule "times_zero_1" (formula "15") (term "0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "6"))
                                       (rule "times_zero_1" (formula "19") (term "0,0"))
                                       (rule "add_zero_left" (formula "19") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                       (rule "mul_literals" (formula "19") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "24") (term "0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                        (builtin "Evaluate Query" (formula "29") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                       (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_0111000100001_0" (formula "30") (term "0"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "eqSymm" (formula "28") (term "0,0,1"))
                                       (rule "variableDeclaration" (formula "28") (term "1") (newnames "queryResult"))
                                       (rule "apply_eq_boolean_rigid" (formula "28") (term "0,0,0,1") (ifseqformula "30"))
                                       (rule "eqSymm" (formula "28") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "28"))
                                        (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "22")))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "andLeft" (formula "28"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "eqSymm" (formula "29"))
                                          (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,0"))
                                          (rule "assignment" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0"))
                                          (rule "methodCallEmpty" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "emptyModality" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "apply_eq_boolean" (formula "29") (term "1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "notLeft" (formula "29"))
                                          (rule "nnf_ex2all" (formula "29"))
                                          (rule "nnf_notAnd" (formula "1") (term "0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                          (rule "allLeft" (formula "1") (inst "t=k_0"))
                                          (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "1"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "inEqSimp_homoInEq1" (formula "27"))
                                          (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0"))
                                          (rule "add_zero_right" (formula "27") (term "0"))
                                          (rule "leq_literals" (formula "27"))
                                          (rule "closeFalse" (formula "27"))
                                       )
                                       (branch "Exceptional Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "29"))
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "22")))
                                          (rule "andLeft" (formula "28"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "andLeft" (formula "28"))
                                          (rule "notLeft" (formula "28"))
                                          (rule "close" (formula "31") (ifseqformula "30"))
                                       )
                                       (branch "Pre (hasPermission)"
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "22")) (ifInst ""  (formula "8")))
                                          (rule "closeTrue" (formula "28"))
                                       )
                                       (branch "Null reference (callee = null)"
                                           (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
                                          (rule "closeTrue" (formula "28"))
                                       )
                                    )
                                    (branch "CUT: self.ids.length <= k_0 FALSE"
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "notLeft" (formula "12"))
                                       (rule "inEqSimp_leqRight" (formula "27"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "allLeft" (formula "12") (inst "t=k_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "12") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "12") (term "0,0,1"))
                                       (rule "leq_literals" (formula "12") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "allLeft" (formula "4") (inst "t=k_0"))
                                       (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,1,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0,0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "4") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "cut_direct" (formula "4") (term "1,0"))
                                       (branch "CUT: x_0 <= -1 + k_0 TRUE"
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "4"))
                                          (rule "mul_literals" (formula "21") (term "0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                          (rule "mul_literals" (formula "21") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                           (builtin "Evaluate Query" (formula "32") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                          (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_01111000100001_0" (formula "33") (term "0"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "eqSymm" (formula "30") (term "0,0,1"))
                                          (rule "variableDeclaration" (formula "30") (term "1") (newnames "queryResult"))
                                          (rule "apply_eq_boolean_rigid" (formula "30") (term "0,0,0,1") (ifseqformula "33"))
                                          (rule "eqSymm" (formula "30") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                           (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                          (branch "Post (hasPermission)"
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "24")))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "31"))
                                             (rule "eqSymm" (formula "31"))
                                             (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0"))
                                             (rule "assignment" (formula "32") (term "1"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0"))
                                             (rule "methodCallEmpty" (formula "32") (term "1"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "emptyModality" (formula "32") (term "1"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "apply_eq_boolean" (formula "31") (term "1") (ifseqformula "32"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "notLeft" (formula "31"))
                                             (rule "nnf_ex2all" (formula "31"))
                                             (rule "nnf_notAnd" (formula "1") (term "0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                             (rule "allLeft" (formula "1") (inst "t=k_0"))
                                             (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                                             (rule "qeq_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "29") (ifseqformula "1"))
                                             (rule "andLeft" (formula "29"))
                                             (rule "inEqSimp_homoInEq1" (formula "29"))
                                             (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                             (rule "add_literals" (formula "29") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "29") (term "1,0"))
                                             (rule "add_literals" (formula "29") (term "0"))
                                             (rule "leq_literals" (formula "29"))
                                             (rule "closeFalse" (formula "29"))
                                          )
                                          (branch "Exceptional Post (hasPermission)"
                                              (builtin "One Step Simplification" (formula "31"))
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "24")))
                                             (rule "andLeft" (formula "30"))
                                             (rule "andLeft" (formula "31"))
                                             (rule "andLeft" (formula "30"))
                                             (rule "notLeft" (formula "30"))
                                             (rule "close" (formula "33") (ifseqformula "32"))
                                          )
                                          (branch "Pre (hasPermission)"
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "24")) (ifInst ""  (formula "10")))
                                             (rule "closeTrue" (formula "30"))
                                          )
                                          (branch "Null reference (callee = null)"
                                              (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "35")))
                                             (rule "closeTrue" (formula "30"))
                                          )
                                       )
                                       (branch "CUT: x_0 <= -1 + k_0 FALSE"
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_leqRight" (formula "30"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "cut_direct" (formula "5") (term "0,1"))
                                          (branch "CUT: self.ids[k_0] = id TRUE"
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "notLeft" (formula "6"))
                                              (builtin "Evaluate Query" (formula "34") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                             (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_011111000100001_0" (formula "35") (term "0"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "eqSymm" (formula "31") (term "0,0,1"))
                                             (rule "variableDeclaration" (formula "31") (term "1") (newnames "queryResult"))
                                             (rule "apply_eq_boolean_rigid" (formula "31") (term "0,0,0,1") (ifseqformula "35"))
                                             (rule "eqSymm" (formula "31") (term "0,0,1"))
                                              (builtin "One Step Simplification" (formula "31"))
                                              (builtin "Use Operation Contract" (formula "31") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                             (branch "Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "eqSymm" (formula "32"))
                                                (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,0"))
                                                (rule "assignment" (formula "33") (term "1"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,0"))
                                                (rule "methodCallEmpty" (formula "33") (term "1"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "emptyModality" (formula "33") (term "1"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "apply_eq_boolean" (formula "32") (term "1") (ifseqformula "33"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "notLeft" (formula "32"))
                                                (rule "nnf_ex2all" (formula "32"))
                                                (rule "nnf_notAnd" (formula "1") (term "0"))
                                                (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                (rule "allLeft" (formula "1") (inst "t=k_0"))
                                                (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "28"))
                                                (rule "qeq_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "30"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0"))
                                                (rule "add_literals" (formula "1") (term "0"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "Exceptional Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "andLeft" (formula "33"))
                                                (rule "notLeft" (formula "31"))
                                                (rule "close" (formula "34") (ifseqformula "33"))
                                             )
                                             (branch "Pre (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")) (ifInst ""  (formula "11")))
                                                (rule "closeTrue" (formula "31"))
                                             )
                                             (branch "Null reference (callee = null)"
                                                 (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "37")))
                                                (rule "closeTrue" (formula "31"))
                                             )
                                          )
                                          (branch "CUT: self.ids[k_0] = id FALSE"
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                              (builtin "Evaluate Query" (formula "33") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                             (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(x_0)),perm)_111111000100001_0" (formula "34") (term "0"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "eqSymm" (formula "30") (term "0,0,1"))
                                             (rule "variableDeclaration" (formula "30") (term "1") (newnames "queryResult"))
                                             (rule "apply_eq_boolean_rigid" (formula "30") (term "0,0,0,1") (ifseqformula "34"))
                                             (rule "eqSymm" (formula "30") (term "0,0,1"))
                                              (builtin "One Step Simplification" (formula "30"))
                                              (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                             (branch "Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "23")))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "andLeft" (formula "31"))
                                                (rule "eqSymm" (formula "31"))
                                                (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0"))
                                                (rule "assignment" (formula "32") (term "1"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0"))
                                                (rule "methodCallEmpty" (formula "32") (term "1"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "emptyModality" (formula "32") (term "1"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "apply_eq_boolean" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "notLeft" (formula "31"))
                                                (rule "nnf_ex2all" (formula "31"))
                                                (rule "nnf_notAnd" (formula "1") (term "0"))
                                                (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                (rule "allLeft" (formula "1") (inst "t=k_0"))
                                                (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "29"))
                                                (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                                (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "1") (term "0,0,1"))
                                                (rule "leq_literals" (formula "1") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "27") (term "0"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "closeFalse" (formula "27"))
                                             )
                                             (branch "Exceptional Post (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "31"))
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "23")))
                                                (rule "andLeft" (formula "30"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "notLeft" (formula "30"))
                                                (rule "close" (formula "33") (ifseqformula "32"))
                                             )
                                             (branch "Pre (hasPermission)"
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")))
                                                (rule "closeTrue" (formula "30"))
                                             )
                                             (branch "Null reference (callee = null)"
                                                 (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "36")))
                                                (rule "closeTrue" (formula "30"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "if x_6 false"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "notLeft" (formula "1"))
                           (rule "blockEmpty" (formula "24") (term "1"))
                           (rule "apply_eq_boolean" (formula "18") (term "1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "notLeft" (formula "18"))
                           (rule "nnf_ex2all" (formula "18"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "postincrement" (formula "24") (term "1"))
                           (rule "compound_int_cast_expression" (formula "24") (term "1") (inst "#v=x_1"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_10"))
                           (rule "remove_parentheses_right" (formula "24") (term "1"))
                           (rule "assignmentAdditionInt" (formula "24") (term "1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                           (rule "widening_identity_cast_5" (formula "24") (term "1"))
                           (rule "assignment" (formula "24") (term "1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "tryEmpty" (formula "24") (term "1"))
                           (rule "methodCallEmpty" (formula "24") (term "1"))
                           (rule "emptyModality" (formula "24") (term "1"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "4")))
                           (rule "polySimp_mulComm0" (formula "24") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "0,0,1"))
                           (rule "mul_literals" (formula "24") (term "0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "24") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "1,1,0,0,0,0,1,0"))
                           (rule "add_literals" (formula "24") (term "0,1,1,0,0,0,0,1,0"))
                           (rule "add_zero_left" (formula "24") (term "1,1,0,0,0,0,1,0"))
                           (rule "precOfInt" (formula "24") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,1"))
                           (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "24") (term "0,1,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,1,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,1,1"))
                           (rule "add_zero_right" (formula "24") (term "0,1,1"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1"))
                           (rule "add_literals" (formula "24") (term "0,0,0,1,1"))
                           (rule "add_zero_left" (formula "24") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,1"))
                           (rule "add_literals" (formula "24") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "24") (term "0,1,1"))
                           (rule "leq_literals" (formula "24") (term "1,1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                           (rule "times_zero_2" (formula "24") (term "1,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                           (rule "mul_literals" (formula "24") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                           (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_subsumption1" (formula "24") (term "0,0") (ifseqformula "15"))
                           (rule "leq_literals" (formula "24") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "ifthenelse_split" (formula "17") (term "0"))
                           (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) TRUE"
                              (rule "exLeft" (formula "17") (inst "sk=k_0"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "eqSymm" (formula "21"))
                              (rule "inEqSimp_homoInEq0" (formula "19"))
                              (rule "polySimp_addComm1" (formula "19") (term "0"))
                              (rule "applyEqRigid" (formula "28") (term "1,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                              (rule "mul_literals" (formula "19") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                              (rule "andRight" (formula "28"))
                              (branch "Case 1"
                                 (rule "impRight" (formula "28"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "9") (inst "t=add(Z(1(#)), x_0)"))
                                 (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "9") (term "0,0,1"))
                                 (rule "leq_literals" (formula "9") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "16"))
                                 (rule "qeq_literals" (formula "9") (term "0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "closeFalse" (formula "9"))
                              )
                              (branch "Case 2"
                                 (rule "nnf_ex2all" (formula "28"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "1,0"))
                                 (rule "commute_or" (formula "1") (term "1,0"))
                                 (rule "shift_paren_or" (formula "1") (term "0"))
                                 (rule "commute_or_2" (formula "1") (term "0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1") (ifseqformula "6"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "arrayLengthIsAnInt" (formula "2") (term "1,1,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "arrayLengthNotNegative" (formula "2") (term "1,1,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=k_0"))
                                 (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "leq_literals" (formula "1") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) FALSE"
                              (rule "eqSymm" (formula "17"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "notLeft" (formula "17"))
                              (rule "apply_eq_boolean" (formula "25") (term "1,1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "nnf_ex2all" (formula "19"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "andRight" (formula "25"))
                              (branch "Case 1"
                                 (rule "impRight" (formula "25"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "allLeft" (formula "10") (inst "t=add(Z(1(#)), x_0)"))
                                 (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                 (rule "leq_literals" (formula "10") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "10") (term "0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "closeFalse" (formula "10"))
                              )
                              (branch "Case 2"
                                 (rule "notRight" (formula "25"))
                                 (rule "exLeft" (formula "1") (inst "sk=k_0"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "2"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "arrayLengthNotNegative" (formula "6") (term "1,1,0,0"))
                                 (rule "arrayLengthIsAnInt" (formula "7") (term "1,1,0,0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "allLeft" (formula "5") (inst "t=k_0"))
                                 (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "5") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "5"))
                                 (rule "applyEqRigid" (formula "8") (term "0,2,1,0,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq0" (formula "6"))
                                 (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "1,0"))
                                 (rule "times_zero_1" (formula "6") (term "0"))
                                 (rule "qeq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "24") (term "0,2,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "23") (term "0,2,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "8") (term "0,2,1,1,0,0,1,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "8") (term "0,2,1,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "27") (term "0,2,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "2"))
                                 (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0,0") (ifseqformula "10"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,0,0") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "22")))
                                 (rule "true_left" (formula "7"))
                                 (rule "cut_direct" (formula "6") (term "0"))
                                 (branch "CUT: self.roles[k_0].permissions = null TRUE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "8") (term "0,1,1,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "8") (term "1,0,0,1,0") (ifseqformula "6"))
                                    (rule "arrayLengthIsAnInt" (formula "8") (term "1,1,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "arrayLengthNotNegative" (formula "8") (term "1,1,0,0"))
                                    (rule "allLeft" (formula "8") (inst "t=k_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "8") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "cut_direct" (formula "8") (term "0"))
                                    (branch "CUT: null.length <= k_0 TRUE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                                       (rule "times_zero_1" (formula "7") (term "0,0"))
                                       (rule "add_zero_left" (formula "7") (term "0"))
                                        (builtin "Evaluate Query" (formula "4") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                       (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(k_0)),perm)_0011100100001_0" (formula "5") (term "0"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                       (rule "variableDeclaration" (formula "25") (term "1") (newnames "queryResult"))
                                       (rule "applyEqRigid" (formula "25") (term "0,0,0,1") (ifseqformula "4"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                        (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0"))
                                          (rule "assignment" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "applyEq" (formula "26") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "26") (term "1,0,1,0,0,0") (ifseqformula "6"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "methodCallEmpty" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "emptyModality" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "notRight" (formula "27"))
                                          (rule "applyEq" (formula "27") (term "1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "exLeft" (formula "27") (inst "sk=k_1"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "inEqSimp_homoInEq0" (formula "28"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1"))
                                          (rule "mul_literals" (formula "28") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "9"))
                                          (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "28"))
                                          (rule "times_zero_1" (formula "27") (term "0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                          (rule "mul_literals" (formula "27") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "27"))
                                          (rule "leq_literals" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "allLeft" (formula "9") (inst "t=k_1"))
                                          (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "30"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_zero_right" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                       (branch "Exceptional Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "close" (formula "28") (ifseqformula "27"))
                                       )
                                       (branch "Pre (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")) (ifInst ""  (formula "12")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                       (branch "Null reference (callee = null)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "28")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                    )
                                    (branch "CUT: null.length <= k_0 FALSE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "inEqSimp_leqRight" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                        (builtin "Evaluate Query" (formula "5") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                       (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(k_0)),perm)_1011100100001_0" (formula "6") (term "0"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                       (rule "variableDeclaration" (formula "25") (term "1") (newnames "queryResult"))
                                       (rule "applyEqRigid" (formula "25") (term "0,0,0,1") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                        (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0"))
                                          (rule "assignment" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "applyEq" (formula "26") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "26") (term "1,0,1,0,0,0") (ifseqformula "7"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "methodCallEmpty" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "emptyModality" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "notRight" (formula "27"))
                                          (rule "applyEq" (formula "27") (term "1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "exLeft" (formula "27") (inst "sk=k_1"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "inEqSimp_homoInEq0" (formula "28"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                          (rule "mul_literals" (formula "28") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                          (rule "allLeft" (formula "10") (inst "t=k_1"))
                                          (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "10") (term "0,0,1"))
                                          (rule "leq_literals" (formula "10") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "10") (term "0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "closeFalse" (formula "10"))
                                       )
                                       (branch "Exceptional Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "close" (formula "28") (ifseqformula "27"))
                                       )
                                       (branch "Pre (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")) (ifInst ""  (formula "12")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                       (branch "Null reference (callee = null)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                    )
                                 )
                                 (branch "CUT: self.roles[k_0].permissions = null FALSE"
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "allLeft" (formula "8") (inst "t=k_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "8") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "cut_direct" (formula "8") (term "0"))
                                    (branch "CUT: self.roles[k_0].permissions.length <= k_0 TRUE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                                       (rule "times_zero_1" (formula "7") (term "0,0"))
                                       (rule "add_zero_left" (formula "7") (term "0"))
                                        (builtin "Evaluate Query" (formula "4") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                       (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(k_0)),perm)_0111100100001_0" (formula "5") (term "0"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                       (rule "variableDeclaration" (formula "25") (term "1") (newnames "queryResult"))
                                       (rule "applyEqRigid" (formula "25") (term "0,0,0,1") (ifseqformula "4"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                        (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0"))
                                          (rule "assignment" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "methodCallEmpty" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "emptyModality" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "notRight" (formula "27"))
                                          (rule "applyEq" (formula "27") (term "1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "exLeft" (formula "27") (inst "sk=k_1"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "inEqSimp_homoInEq0" (formula "28"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                          (rule "mul_literals" (formula "28") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "9"))
                                          (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "28"))
                                          (rule "mul_literals" (formula "27") (term "0,0"))
                                          (rule "add_zero_left" (formula "27") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                          (rule "mul_literals" (formula "27") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "27"))
                                          (rule "leq_literals" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "allLeft" (formula "9") (inst "t=k_1"))
                                          (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "30"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_zero_right" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                       (branch "Exceptional Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "26"))
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "close" (formula "28") (ifseqformula "27"))
                                       )
                                       (branch "Pre (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")) (ifInst ""  (formula "12")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                       (branch "Null reference (callee = null)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                    )
                                    (branch "CUT: self.roles[k_0].permissions.length <= k_0 FALSE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "notLeft" (formula "8"))
                                       (rule "inEqSimp_leqRight" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                        (builtin "Evaluate Query" (formula "5") (term "0") (newnames "perm_0,callee,queryResult,res_hasPermission"))
                                       (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_hasPermission(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole_select(heap,edu_kit_informatik_pcc_service_accesscontrol_IntegerRole[]_select(heap,self,edu_kit_informatik_pcc_service_accesscontrol_AccessControl_roles),arr(k_0)),perm)_1111100100001_0" (formula "6") (term "0"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                       (rule "variableDeclaration" (formula "25") (term "1") (newnames "queryResult"))
                                       (rule "applyEqRigid" (formula "25") (term "0,0,0,1") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "25") (term "0,0,1"))
                                        (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_hasPermission_1,result_1,exc_2") (contract "edu.kit.informatik.pcc.service.accesscontrol.IntegerRole[edu.kit.informatik.pcc.service.accesscontrol.IntegerRole::hasPermission(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0"))
                                          (rule "assignment" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0"))
                                          (rule "methodCallEmpty" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "emptyModality" (formula "27") (term "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "notRight" (formula "27"))
                                          (rule "applyEq" (formula "27") (term "1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "exLeft" (formula "27") (inst "sk=k_1"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "andLeft" (formula "27"))
                                          (rule "inEqSimp_homoInEq0" (formula "28"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                          (rule "mul_literals" (formula "28") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                          (rule "allLeft" (formula "10") (inst "t=k_1"))
                                          (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                                          (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "10") (term "0,0,1"))
                                          (rule "leq_literals" (formula "10") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "10") (term "0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "closeFalse" (formula "10"))
                                       )
                                       (branch "Exceptional Post (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "andLeft" (formula "25"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "close" (formula "28") (ifseqformula "27"))
                                       )
                                       (branch "Pre (hasPermission)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")) (ifInst ""  (formula "12")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                       (branch "Null reference (callee = null)"
                                           (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                                          (rule "closeTrue" (formula "25"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "Exceptional Post (hasPermission)"
                         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "15")))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "19"))
                        (rule "notLeft" (formula "17"))
                        (rule "close" (formula "20") (ifseqformula "19"))
                     )
                     (branch "Pre (hasPermission)"
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "4")) (ifInst ""  (formula "15")))
                        (rule "closeTrue" (formula "21"))
                     )
                     (branch "Null reference (i = null)"
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")))
                        (rule "closeTrue" (formula "21"))
                     )
                  )
                  (branch "Null Reference (i_arr = null)"
                      (builtin "One Step Simplification" (formula "22"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (i_arr != null, but x Out of Bounds!)"
                      (builtin "One Step Simplification" (formula "22"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                     (rule "false_right" (formula "22"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "13"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "15"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Null Reference (x_arr_2 = null)"
               (rule "false_right" (formula "19"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (x_arr_2 != null, but x Out of Bounds!)"
                (builtin "One Step Simplification" (formula "19"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "false_right" (formula "19"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "leq_literals" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_3 false"
             (builtin "One Step Simplification" (formula "19"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (x_arr_1 = null)"
         (rule "false_right" (formula "18"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (x_arr = null)"
      (rule "false_right" (formula "14"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "eqSymm" (formula "12"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
   (rule "blockEmpty" (formula "16") (term "1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
   (rule "commute_and" (formula "12") (term "1,0,0,0"))
   (rule "compound_less_than_comparison_2" (formula "16") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_2"))
   (rule "eval_order_array_access6" (formula "16") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "16"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "assignment_read_length" (formula "16"))
   (branch "Normal Execution (x_arr != null)"
       (builtin "One Step Simplification" (formula "16"))
      (rule "shift_paren_and" (formula "12") (term "0,0,0"))
      (rule "commute_and_2" (formula "12") (term "0,0,0,0"))
      (rule "commute_and" (formula "12") (term "0,0,0,0,0"))
      (rule "less_than_comparison_simple" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "emptyModality" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "impRight" (formula "16"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "inEqSimp_geqRight" (formula "12"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
      (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "10"))
      (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
      (rule "inEqSimp_homoInEq1" (formula "11"))
      (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,0"))
      (rule "times_zero_1" (formula "11") (term "0"))
      (rule "leq_literals" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "applyEq" (formula "7") (term "1") (ifseqformula "10"))
      (rule "methodCallReturn" (formula "15") (term "1"))
      (rule "assignment" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "methodCallEmpty" (formula "15") (term "1"))
      (rule "tryEmpty" (formula "15") (term "1"))
      (rule "emptyModality" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "applyEq" (formula "15") (term "1,1,1,0,0,0,0,0") (ifseqformula "10"))
      (rule "Class_invariant_axiom_for_edu_kit_informatik_pcc_service_accesscontrol_AccessControl" (formula "15") (term "1") (ifseqformula "3"))
      (rule "eqSymm" (formula "15") (term "1,0,1"))
      (rule "eqSymm" (formula "15") (term "0,1,1"))
      (rule "replace_known_right" (formula "15") (term "0,1,1,0,0,1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
      (rule "sortsDisjointModuloNull" (formula "15") (term "0,1,1"))
      (rule "replace_known_right" (formula "15") (term "0,0,1,1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
      (rule "applyEq" (formula "15") (term "0,1,1") (ifseqformula "7"))
      (rule "eqSymm" (formula "15") (term "1,1"))
      (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "nonNull" (formula "15") (term "1") (inst "i=i"))
      (rule "greater_literals" (formula "15") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
      (rule "sub_literals" (formula "15") (term "2,1,0,1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0,1") (ifseqformula "1") (ifseqformula "12"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
      (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0,1") (ifseqformula "7"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1"))
      (rule "nnf_imp2or" (formula "15") (term "0,1"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,1"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,1"))
      (rule "arrayLengthNotNegative" (formula "7") (term "0"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
      (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "ifthenelse_split" (formula "11") (term "0"))
      (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) TRUE"
         (rule "exLeft" (formula "11") (inst "sk=k_0"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "eqSymm" (formula "15"))
         (rule "inEqSimp_homoInEq0" (formula "13"))
         (rule "polySimp_addComm1" (formula "13") (term "0"))
         (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13"))
         (rule "polySimp_mulComm0" (formula "13") (term "1"))
         (rule "polySimp_rightDist" (formula "13") (term "1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
         (rule "mul_literals" (formula "13") (term "0,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1"))
         (rule "andRight" (formula "19"))
         (branch "Case 1"
            (rule "nnf_ex2all" (formula "19"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "1,0"))
            (rule "commute_or" (formula "1") (term "1,0"))
            (rule "shift_paren_or" (formula "1") (term "0"))
            (rule "commute_or_2" (formula "1") (term "0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0"))
            (rule "arrayLengthIsAnInt" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "arrayLengthNotNegative" (formula "11") (term "0"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
            (rule "allLeft" (formula "1") (inst "t=k_0"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
            (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "15"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "leq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "allRight" (formula "19") (inst "sk=i_0"))
            (rule "orRight" (formula "19"))
            (rule "notRight" (formula "20"))
            (rule "orRight" (formula "20"))
            (rule "inEqSimp_leqRight" (formula "20"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "21"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "allLeft" (formula "9") (inst "t=i_0"))
            (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "9") (term "0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "exists int k; ( self.roles[k].hasPermission(perm) = TRUE & k >= 0 & k <= -1 + x_0 & self.ids[k] = id) FALSE"
         (rule "eqSymm" (formula "11"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "apply_eq_boolean" (formula "16") (term "1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "nnf_ex2all" (formula "12"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
         (rule "andRight" (formula "16"))
         (branch "Case 1"
            (rule "notRight" (formula "16"))
            (rule "exLeft" (formula "1") (inst "sk=i_0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "allLeft" (formula "5") (inst "t=i_0"))
            (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
            (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
            (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
            (rule "add_literals" (formula "5") (term "0,0,1"))
            (rule "leq_literals" (formula "5") (term "0,1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "allRight" (formula "16") (inst "sk=i_0"))
            (rule "orRight" (formula "16"))
            (rule "orRight" (formula "16"))
            (rule "notRight" (formula "18"))
            (rule "inEqSimp_geqRight" (formula "18"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "18"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "allLeft" (formula "10") (inst "t=i_0"))
            (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
            (rule "add_literals" (formula "10") (term "0,0,1"))
            (rule "leq_literals" (formula "10") (term "0,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (x_arr = null)"
      (rule "false_right" (formula "17"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
